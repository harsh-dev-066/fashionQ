{"version":3,"sources":["components/checkout/checkout-item.jsx","components/stripe-button/stripe-button.jsx","pages/checkout/checkout.jsx"],"names":["connect","dispatch","clearItem","item","clearItemFromCart","addItem","removeItem","_ref","cartItem","name","imageUrl","price","quantity","React","createElement","className","src","alt","onClick","StripeCheckoutButton","priceForStripe","StripeCheckout","label","billingAddress","shippingAddress","currency","description","concat","amount","panelLabel","token","onToken","alert","stripeKey","mapStateToProps","createStructuredSelector","cartItems","SelectCartItems","total","selectCartTotal","map","CheckoutItem","key","id"],"mappings":"sLAgCeA,kBAAQ,KANIC,IAAQ,CAC/BC,UAAWC,GAAQF,EAASG,YAAkBD,IAC9CE,QAASF,GAAQF,EAASI,YAAQF,IAClCG,WAAYH,GAAQF,EAASK,YAAWH,MAG7BH,CAzBMO,IAAmD,IAAlD,SAAEC,EAAQ,UAAEN,EAAS,QAAEG,EAAO,WAAEC,GAAYC,EAC9D,MAAM,KAAEE,EAAI,SAAEC,EAAQ,MAAEC,EAAK,SAAEC,GAAaJ,EAC5C,OACIK,IAAAC,cAAA,OAAKC,UAAU,iBACXF,IAAAC,cAAA,OAAKC,UAAU,mBACXF,IAAAC,cAAA,OAAKE,IAAKN,EAAUO,IAAI,UAE5BJ,IAAAC,cAAA,QAAMC,UAAU,QAAQN,GACxBI,IAAAC,cAAA,QAAMC,UAAU,YACZF,IAAAC,cAAA,OAAKC,UAAU,QAAQG,QAASA,IAAMZ,EAAWE,IAAY,UAC7DK,IAAAC,cAAA,QAAMC,UAAU,SAASH,GACzBC,IAAAC,cAAA,OAAKC,UAAU,QAAQG,QAASA,IAAMb,EAAQG,IAAY,WAE9DK,IAAAC,cAAA,QAAMC,UAAU,SAAQ,IAAU,GAARJ,EAAW,KACrCE,IAAAC,cAAA,OAAKC,UAAU,gBAAgBG,QAASA,IAAMhB,EAAUM,IAAY,a,uCC2BjEW,MA5CcZ,IAAgB,IAAf,MAAEI,GAAOJ,EACrC,MAAMa,EAAyB,IAART,EA2BvB,OACEE,IAAAC,cAACO,IAAc,CACbC,MAAM,UACNb,KAAK,GACLc,gBAAc,EACdC,iBAAe,EACfC,SAAS,MACTC,YAAW,oBAAAC,OAAsBhB,GACjCiB,OAAQR,EACRS,WAAW,UACXC,MAdYC,KACdC,MAAM,sBAcJC,UArCmB,gDCQzB,MAgCMC,EAAkBC,YAAyB,CAC/CC,UAAWC,IACXC,MAAOC,MAGMvC,sBAAQkC,EAARlC,CArCMO,IAAA,IAAC,UAAE6B,EAAS,MAAEE,GAAO/B,EAAA,OACxCM,IAAAC,cAAA,OAAKC,UAAU,iBACbF,IAAAC,cAAA,OAAKC,UAAU,mBACbF,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,YAAM,YAERD,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,YAAM,gBAERD,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,YAAM,aAERD,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,YAAM,UAERD,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,YAAM,YAGTsB,EAAUI,IAAKhC,GACdK,IAAAC,cAAC2B,EAAY,CAACC,IAAKlC,EAASmC,GAAInC,SAAUA,KAE5CK,IAAAC,cAAA,OAAKC,UAAU,SAAQ,aAAmB,GAARuB,GAClCzB,IAAAC,cAAA,OAAKC,UAAU,gBAAe,2DAE5BF,IAAAC,cAAA,WAAM,sEAGRD,IAAAC,cAACK,EAAoB,CAACR,MAAe,GAAR2B,Q","file":"static/js/7.7fecbd3d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { clearItemFromCart, addItem, removeItem } from '../../redux/cart/cart-action';\r\n\r\nimport './checkout-item.scss';\r\n\r\nconst CheckoutItem = ({ cartItem, clearItem, addItem, removeItem }) => {\r\n    const { name, imageUrl, price, quantity } = cartItem;\r\n    return (\r\n        <div className='checkout-item'>\r\n            <div className='image-container'>\r\n                <img src={imageUrl} alt='item' />\r\n            </div>\r\n            <span className='name'>{name}</span>\r\n            <span className='quantity'>\r\n                <div className='arrow' onClick={() => removeItem(cartItem)} >&#10094;</div>\r\n                <span className='value'>{quantity}</span>\r\n                <div className='arrow' onClick={() => addItem(cartItem)} >&#10095;</div>\r\n            </span>\r\n            <span className='price'> {price * 70} </span>\r\n            <div className='remove-button' onClick={() => clearItem(cartItem)} >&#10005;</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    clearItem: item => dispatch(clearItemFromCart(item)),\r\n    addItem: item => dispatch(addItem(item)),\r\n    removeItem: item => dispatch(removeItem(item))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(CheckoutItem);\r\n","import React from \"react\";\r\nimport StripeCheckout from \"react-stripe-checkout\";\r\nimport axios from \"axios\";\r\n\r\nconst StripeCheckoutButton = ({ price }) => {\r\n  const priceForStripe = price * 100;\r\n  const publishableKey = \"pk_test_XIri3Og1WxHrDyerZkovLw5d00jDPsTs02\";\r\n\r\n  // const onToken = async (token) => {\r\n  //   axios({\r\n  //     url: \"payment\",\r\n  //     method: \"post\",\r\n  //     data: {\r\n  //       amount: priceForStripe,\r\n  //       token: token,\r\n  //     },\r\n  //   })\r\n  //     .then((response) => {\r\n  //       alert(\"succesful payment\");\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.log(\"Payment Error: \", error.response);\r\n  //       alert(\r\n  //         \"There was an issue with your payment! Please make sure you use the provided credit card.\"\r\n  //       );\r\n  //     });\r\n  // };\r\n\r\n  const onToken = () => {\r\n    alert(\"succesful payment\");\r\n  };\r\n\r\n  return (\r\n    <StripeCheckout\r\n      label=\"Pay Now\"\r\n      name=\"\"\r\n      billingAddress\r\n      shippingAddress\r\n      currency=\"INR\"\r\n      description={`Your total is Rs.${price}`}\r\n      amount={priceForStripe}\r\n      panelLabel=\"Pay Now\"\r\n      token={onToken}\r\n      stripeKey={publishableKey}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StripeCheckoutButton;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport CheckoutItem from \"../../components/checkout/checkout-item\";\r\n\r\nimport {\r\n  SelectCartItems,\r\n  selectCartTotal,\r\n} from \"../../redux/cart/cart-selectos\";\r\n\r\nimport \"./checkout-page.scss\";\r\nimport StripeCheckoutButton from \"../../components/stripe-button/stripe-button\";\r\n\r\nconst CheckoutPage = ({ cartItems, total }) => (\r\n  <div className=\"checkout-page\">\r\n    <div className=\"checkout-header\">\r\n      <div className=\"header-block\">\r\n        <span>Product</span>\r\n      </div>\r\n      <div className=\"header-block\">\r\n        <span>Description</span>\r\n      </div>\r\n      <div className=\"header-block\">\r\n        <span>Quantity</span>\r\n      </div>\r\n      <div className=\"header-block\">\r\n        <span>Price</span>\r\n      </div>\r\n      <div className=\"header-block\">\r\n        <span>Remove</span>\r\n      </div>\r\n    </div>\r\n    {cartItems.map((cartItem) => (\r\n      <CheckoutItem key={cartItem.id} cartItem={cartItem} />\r\n    ))}\r\n    <div className=\"total\">TOTAL: Rs.{total * 75}</div>\r\n    <div className=\"test-warning\">\r\n      *Please use the following test credit card for payments*\r\n      <br />\r\n      4242 4242 4242 4242 - Exp: \"Please Enter a future date\" - CVV: 123\r\n    </div>\r\n    <StripeCheckoutButton price={total * 75} />\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  cartItems: SelectCartItems,\r\n  total: selectCartTotal,\r\n});\r\n\r\nexport default connect(mapStateToProps)(CheckoutPage);\r\n"],"sourceRoot":""}